# coding: utf-8

"""
    Organization structure API

    Welcome on the documentation for the Organization Structure API 

    The version of the OpenAPI document: 1.0
    Contact: developers@lucca.fr
    Created by: www.lucca.fr
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from lucca_organization_python_sdk import schemas  # noqa: F401


class AxisSection(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    ## Introduction

In some application contexts, resources can be attached to analytical items. In most cases, the goal is to answer the needs of cost accounting. Axes are primarily used by Timmi Timesheet & Cleemy Expenses.

Both in Timmi Timesheet and Cleemy Expense, users can enter their working hours or expenses spent on projects, tasks, work sites, cost centers, etc... These are the `AxisSection[]`, categorized in `Axis[]`. These axes can have parent-children relationships, and their axis-sections as well.

![axis-section-diagram.png](https://stoplight.io/api/v1/projects/cHJqOjEwNjgxNg/images/y74HUrks5dQ)

## Example

Let's take an example. Say you expect your users to enter spent working hours on each project. Each project belongs to a single client, and is divided into tasks.

In other words:

- Clients
  - (1..n) Projects: each project belongs to one, and one only, client.
    - (n..n) Tasks: each task belongs to one or more project(s). 

Then:
- Each client is an `AxisSection` in the "Clients" `Axis`.
- One client has zero or more projects, which are `AxisSection[]` in the "Projects" `Axis`. A project is child to one and only one client.
- One project has zero or more tasks, which are `AxisSection[]` in the "Tasks" `Axis`. Each task axis-section is child to one or more project(s) axis-sections.

The JSON representation of these axes in the API would be:

```json
// GET /api/v3/axes HTTP/1.1
{
  "data": {
    "items": [
      {
        "id": 1,
        "name": "Clients",
        "parentAxisId": null,
        "isNNRelation": false
      },
      {
        "id": 2,
        "name": "Projects",
        "parentAxisId": 1,
        "isNNRelation": false
      },
      {
        "id": 3,
        "name": "Tasks",
        "parentAxisId": 2,
        "isNNRelation": true
      }
    ]
  }
}
```

Regarding axis-sections:

```json
// GET /api/v3/axisSections HTTP/1.1
{
  "data": {
    "items": [
      {
        "id": 1,
        "name": "Acme Corporation",
        "axis": {
          "id": 1,
          "name": "Clients",
          "parentAxisId": null,
          "isNNRelation": false
        },
        "parentAxisSections": []
      },
      {
        "id": 2,
        "name": "My awesome project",
        "axis": {
          "id": 2,
          "name": "Projects",
          "parentAxisId": 1,
          "isNNRelation": false
        },
        "parentAxisSections": [
          {
            "id": 1,
            "axisId": 1
          }
        ]
      },
      {
        "id": 3,
        "name": "My #2 project",
        "axis": {
          "id": 2,
          "name": "Projects",
          "parentAxisId": 1,
          "isNNRelation": false
        },
        "parentAxisSections": [
          {
            "id": 1,
            "axisId": 1
          }
        ]
      },
      {
        "id": 4,
        "name": "User tests",
        "axis": {
          "id": 3,
          "name": "Tasks",
          "parentAxisId": 2,
          "isNNRelation": true
        },
        "parentAxisSections": [
          {
            "id": 2,
            "axisId": 2
          },
          {
            "id": 3,
            "axisId": 2
          }
        ]
      }
    ]
  }
}
```
## Fields
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.AnyTypeSchema,
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class parentAxisSections(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['AxisSectionTreeless']:
                                return AxisSectionTreeless
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['AxisSectionTreeless'], typing.List['AxisSectionTreeless']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'parentAxisSections':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'AxisSectionTreeless':
                            return super().__getitem__(i)
                    
                    
                    class childrenAxisSections(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['AxisSectionTreeless']:
                                return AxisSectionTreeless
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['AxisSectionTreeless'], typing.List['AxisSectionTreeless']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'childrenAxisSections':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'AxisSectionTreeless':
                            return super().__getitem__(i)
                    __annotations__ = {
                        "parentAxisSections": parentAxisSections,
                        "childrenAxisSections": childrenAxisSections,
                    }
        
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["parentAxisSections"]) -> MetaOapg.properties.parentAxisSections: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["childrenAxisSections"]) -> MetaOapg.properties.childrenAxisSections: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["parentAxisSections", "childrenAxisSections", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["parentAxisSections"]) -> typing.Union[MetaOapg.properties.parentAxisSections, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["childrenAxisSections"]) -> typing.Union[MetaOapg.properties.childrenAxisSections, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["parentAxisSections", "childrenAxisSections", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                parentAxisSections: typing.Union[MetaOapg.properties.parentAxisSections, list, tuple, schemas.Unset] = schemas.unset,
                childrenAxisSections: typing.Union[MetaOapg.properties.childrenAxisSections, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    parentAxisSections=parentAxisSections,
                    childrenAxisSections=childrenAxisSections,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                AxisSectionTreeless,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AxisSection':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from lucca_organization_python_sdk.model.axis_section_treeless import AxisSectionTreeless
